/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';
import { CacheableResponsePlugin } from 'workbox-cacheable-response';

declare const self: ServiceWorkerGlobalScope;

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith('/_')) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// Регистрация стратегии для кэширования
registerRoute(
  // Регулярное выражение для всех запросов к API, за исключением api/Auth
  ({ url }) => url.pathname.startsWith('/api/') && !url.pathname.startsWith('/api/Auth'),
  // Использование стратегии "Устаревший, пока перепроверяется"
  new StaleWhileRevalidate({
    cacheName: 'lru-cache',
    plugins: [
      // Плагин для кэширования ответов со статусом 200
      new CacheableResponsePlugin({
        statuses: [200],
      }),
      // Плагин для управления сроком жизни кэшированных элементов
      new ExpirationPlugin({
        maxEntries: 100,
      }),
      // Максимальное количество элементов в кэше
    ],
  })
);

// Регистрация стратегии для кэширования изображений
registerRoute(
  // Регулярное выражение для всех запросов к изображениям (только если с сервера 
  // будут приходить ссылки на скачивание, в остальных случаях нужно другое распознание)
  ({ request }) => request.destination === 'image',
  // Использование стратегии "Устаревший, пока перепроверяется" для изображений
  new StaleWhileRevalidate({
    cacheName: 'image-cache',
    plugins: [
      // Плагин для кэширования ответов со статусом 200
      new CacheableResponsePlugin({
        statuses: [200],
      }),
      // Плагин для управления сроком жизни кэшированных элементов
      new ExpirationPlugin({
        maxEntries: 50,
      }),
      // Максимальное количество изображений в кэше
    ],
  })
);

// // только для изображений png
// registerRoute(
//   // Add in any other file extensions or routing criteria as needed.
//   ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'),
//   // Customize this strategy as needed, e.g., by changing to CacheFirst.
//   new StaleWhileRevalidate({
//     cacheName: 'images',
//     plugins: [
//       // Ensure that once this runtime cache reaches a maximum size the
//       // least-recently used images are removed.
//       new ExpirationPlugin({ maxEntries: 50 }),
//     ],
//   })
// );

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});
